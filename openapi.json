{
    "openapi": "3.0.3",
    "info": {
      "title": "NWApi Server List API",
      "description": "Provides access to a cached list of SCP: Secret Laboratory servers, originally sourced from the official `lobbylist.php` endpoint. Enhances the original data with filtering, field selection, limiting, and distance-based sorting.",
      "version": "1.0.0",
      "contact": {
        "name": "DAON Development Team",
        "url": "https://daon.xyz",
        "email": "noah@daon.xyz"
      },
      "license": {
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT"
      }
    },
    "servers": [
      {
        "url": "https://nwapi.daon.xyz",
        "description": "Real-time Server List API"
      },
      {
        "url": "https://historical-scp.daon.xyz",
        "description": "Historical Server Metrics API"
      }
    ],
    "tags": [
      {
        "name": "Real-Time Data",
        "description": "Operations related to the server list"
      },
      {
        "name": "Historical Data",
        "description": "Operations related to historical server metrics"
      }
    ],
    "paths": {
      "/": {
        "get": {
          "tags": ["Real-Time Data"],
          "servers": [
            {
              "url": "https://nwapi.daon.xyz"
            }
          ],
          "summary": "Get Server List",
          "description": "Retrieves a list of SCP:SL servers with powerful filtering capabilities. You can filter by any server property by simply adding it as a query parameter (e.g., `isoCode=US`, `modded=true`).",
          "operationId": "getServerList",
          "parameters": [
            {
              "name": "fields",
              "in": "query",
              "description": "Comma-separated list of server object fields to include in the response. If omitted, all fields are returned.",
              "required": false,
              "style": "form",
              "explode": false,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "serverId",
                    "accountId",
                    "ip",
                    "port",
                    "players",
                    "distance",
                    "info",
                    "pastebin",
                    "version",
                    "privateBeta",
                    "friendlyFire",
                    "modded",
                    "modFlags",
                    "whitelist",
                    "isoCode",
                    "continentCode",
                    "latitude",
                    "longitude",
                    "official",
                    "officialCode",
                    "displaySection",
                    "_distanceFromClient",
                    "_currentPlayers",
                    "_maxPlayers"
                  ]
                }
              },
              "example": "ip,port,players,isoCode"
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Maximum number of server results to return. Use this parameter to reduce response size and improve performance for large datasets.",
              "required": false,
              "schema": {
                "type": "integer",
                "minimum": 1,
                "maximum": 1000,
                "default": null
              },
              "example": 25
            },
            {
              "name": "sortBy",
              "in": "query",
              "description": "Field to sort results by. Use `distance` to sort by distance from your location or `players`to sort by current player count (most populated first).",
              "required": false,
              "schema": {
                "type": "string",
                "enum": ["distance", "players"]
              },
              "example": "players"
            },
            {
              "name": "minPlayers",
              "in": "query",
              "description": "Filter servers to show only those with at least this many current players",
              "required": false,
              "schema": {
                "type": "integer",
                "minimum": 0
              },
              "example": 5
            },
            {
              "name": "maxPlayers",
              "in": "query",
              "description": "Filter servers to show only those with at most this many current players",
              "required": false,
              "schema": {
                "type": "integer",
                "minimum": 0
              },
              "example": 20
            },
            {
              "name": "isoCode",
              "in": "query",
              "description": "Filter servers by country using ISO 3166-1 alpha-2 code",
              "required": false,
              "schema": {
                "type": "string"
              },
              "example": "US"
            },
            {
              "name": "modded",
              "in": "query",
              "description": "Filter servers by modded status",
              "required": false,
              "schema": {
                "type": "boolean"
              },
              "example": false
            },
            {
              "name": "friendlyFire",
              "in": "query",
              "description": "Filter servers by friendly fire setting",
              "required": false,
              "schema": {
                "type": "boolean"
              },
              "example": true
            },
            {
              "name": "whitelist",
              "in": "query",
              "description": "Filter servers by whitelist status",
              "required": false,
              "schema": {
                "type": "boolean"
              },
              "example": false
            },
            {
              "name": "official",
              "in": "query",
              "description": "Filter servers by official status label",
              "required": false,
              "schema": {
                "type": "string",
                "enum": ["REGIONAL OFFICIAL", "LOCAL OFFICIAL"]
              },
              "example": "REGIONAL OFFICIAL"
            },
            {
              "name": "continentCode",
              "in": "query",
              "description": "Filter servers by continent code",
              "required": false,
              "schema": {
                "type": "string"
              },
              "example": "EU"
            },
            {
              "name": "privateBeta",
              "in": "query",
              "description": "Filter servers by private beta status",
              "required": false,
              "schema": {
                "type": "boolean"
              },
              "example": false
            }
          ],
          "responses": {
            "200": {
              "description": "A list of servers matching the criteria.",
              "headers": {
                "X-Data-Timestamp": {
                  "description": "The Unix millisecond timestamp of when the data was last fetched from the source API.",
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  }
                },
                "Access-Control-Allow-Origin": {
                  "description": "CORS header indicating allowed origins",
                  "schema": {
                    "type": "string",
                    "example": "*"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Server"
                    }
                  },
                  "examples": {
                    "Full": {
                      "summary": "Complete server response",
                      "value": [
                        {
                          "serverId": 87680,
                          "accountId": 19126,
                          "ip": "207.174.43.245",
                          "port": 7783,
                          "players": "15/25",
                          "distance": 2180,
                          "info": "PGNvbG9yPSNGRjhDMDA+V2VsY29tZSB0byB0aGUgU0NQIEZvdW5kYXRpb24hPC9jb2xvcj4=",
                          "pastebin": "GmHsVgPG",
                          "version": "14.1.0-release-beta-bab40c71",
                          "privateBeta": false,
                          "friendlyFire": false,
                          "modded": false,
                          "modFlags": 0,
                          "whitelist": false,
                          "isoCode": "CA",
                          "continentCode": "NA",
                          "latitude": 45.499,
                          "longitude": -73.585,
                          "official": "REGIONAL OFFICIAL",
                          "officialCode": 2,
                          "displaySection": 1
                        }
                      ]
                    },
                    "Filtered": {
                      "summary": "Server response with selected fields",
                      "value": [
                        {
                          "ip": "207.174.43.245",
                          "port": 7783,
                          "players": "15/25",
                          "isoCode": "CA"
                        }
                      ]
                    },
                    "WithDistance": {
                      "summary": "Server response with distance sorting",
                      "value": [
                        {
                          "ip": "207.174.43.245",
                          "port": 7783,
                          "players": "15/25",
                          "isoCode": "CA",
                          "_distanceFromClient": 150.7
                        }
                      ]
                    }
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error processing the request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  },
                  "example": {
                    "error": "Failed to process request",
                    "details": "Error parsing server data"
                  }
                }
              }
            }
          }
        }
      },
      "/timestamp": {
        "get": {
          "tags": ["Real-Time Data"],
          "servers": [
            {
              "url": "https://nwapi.daon.xyz"
            }
          ],
          "summary": "Get Data Timestamp",
          "description": "Retrieves the Unix millisecond timestamp of the last time the server list data was successfully fetched and stored. This can be used to determine data freshness and cache invalidation strategies.",
          "operationId": "getDataTimestamp",
          "responses": {
            "200": {
              "description": "The timestamp of the latest data.",
              "headers": {
                "Access-Control-Allow-Origin": {
                  "description": "CORS header indicating allowed origins",
                  "schema": {
                    "type": "string",
                    "example": "*"
                  }
                }
              },
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "required": ["timestamp"],
                    "properties": {
                      "timestamp": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Unix millisecond timestamp when data was last fetched",
                        "example": 1678886400000
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "No data has been fetched and stored yet. This typically occurs if the API was just deployed or the scheduled fetch job has not run successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  },
                  "example": { "error": "No data available yet."}
                }
              }
            },
            "500": {
              "description": "Internal server error retrieving the timestamp. This may indicate an issue with the database connection or storage.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  },
                  "example": { "error": "Failed to fetch timestamp"}
                }
              }
            }
          }
        }
      },
      "/stats/{serverId}": {
        "get": {
          "tags": ["Historical Data"],
          "servers": [
            {
              "url": "https://historical-scp.daon.xyz"
            }
          ],
          "summary": "Get Historical Server Metrics",
          "description": "Retrieves historical player count metrics for a specific server with smart time-based aggregation.\n\n## Overview\nThe API automatically determines the optimal time interval for data aggregation based on the requested time range. This ensures efficient data transfer and meaningful visualization.\n\n## Smart Time Intervals\n\nTime Range | Interval\n---|---\n≤ 30 minutes | 30-second intervals\n≤ 1 hour | 1-minute intervals\n≤ 3 hours | 3-minute intervals\n≤ 6 hours | 5-minute intervals\n≤ 12 hours | 10-minute intervals\n≤ 24 hours | 15-minute intervals\n≤ 7 days | 30-minute intervals\n≤ 30 days | 1-hour intervals\n≤ 90 days | 3-hour intervals\n≤ 180 days | 6-hour intervals\n> 180 days | 1-day intervals\n\n## Benefits\n- Data points are meaningful for the time range\n- Response size remains manageable\n- Visualization remains clear and useful",
          "operationId": "getHistoricalStats",
          "parameters": [
            {
              "name": "serverId",
              "in": "path",
              "description": "Unique identifier of the server",
              "required": true,
              "schema": {
                "type": "integer"
              },
              "example": 87680
            },
            {
              "name": "start",
              "in": "query",
              "description": "Start time in RFC3339 format (e.g., 2024-01-01T00:00:00Z). If not specified, defaults to 24 hours before end time.",
              "required": false,
              "schema": {
                "type": "string",
                "format": "date-time"
              },
              "example": "2024-01-01T00:00:00Z"
            },
            {
              "name": "end",
              "in": "query",
              "description": "End time in RFC3339 format. If not specified, defaults to current time.",
              "required": false,
              "schema": {
                "type": "string",
                "format": "date-time"
              },
              "example": "2024-01-02T00:00:00Z"
            }
          ],
          "responses": {
            "200": {
              "description": "Historical server metrics with automatically determined time intervals",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ServerMetrics"
                    }
                  },
                  "examples": {
                    "Last24Hours": {
                      "summary": "Last 24 hours of data (15-minute intervals)",
                      "value": [
                        {
                          "time": "2024-01-01T00:00:00Z",
                          "players_current": 15.5,
                          "players_max": 25
                        },
                        {
                          "time": "2024-01-01T00:15:00Z",
                          "players_current": 16.2,
                          "players_max": 25
                        }
                      ]
                    },
                    "LastWeek": {
                      "summary": "Last week of data (30-minute intervals)",
                      "value": [
                        {
                          "time": "2024-01-01T00:00:00Z",
                          "players_current": 15.5,
                          "players_max": 25
                        },
                        {
                          "time": "2024-01-01T00:30:00Z",
                          "players_current": 16.2,
                          "players_max": 25
                        }
                      ]
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request parameters",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  },
                  "example": {
                    "error": "Invalid time format",
                    "details": "Use RFC3339 format (e.g., 2024-01-01T00:00:00Z)"
                  }
                }
              }
            },
            "404": {
              "description": "Server not found or no data available for the specified time range",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  },
                  "example": {
                    "error": "No data available",
                    "details": "No metrics found for server 87680 in the specified time range"
                  }
                }
              }
            },
            "500": {
              "description": "Internal server error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  },
                  "example": {
                    "error": "Failed to retrieve server stats",
                    "details": "Database connection error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "Server": {
          "type": "object",
          "description": "Represents a SCP:SL game server with its properties and metadata",
          "properties": {
            "serverId": { 
              "type": "integer", 
              "description": "Unique identifier for the server", 
              "example": 87680 
            },
            "accountId": { 
              "type": "integer", 
              "description": "Account ID of the server owner", 
              "example": 19126 
            },
            "ip": { 
              "type": "string", 
              "format": "ipv4", 
              "description": "IPv4 address of the server", 
              "example": "207.174.43.245" 
            },
            "port": { 
              "type": "integer", 
              "description": "Port number to connect to the server", 
              "example": 7783 
            },
            "players": { 
              "type": "string", 
              "description": "Current players / Max players", 
              "example": "15/25" 
            },
            "distance": { 
              "type": "integer", 
              "description": "Original distance metric from source API", 
              "example": 2180 
            },
            "info": { 
              "type": "string", 
              "description": "Base64 encoded server name/description with Unity Rich Text", 
              "example": "PGNvbG9y..." 
            },
            "pastebin": { 
              "type": "string", 
              "description": "Pastebin ID for server rules or additional information", 
              "example": "GmHsVgPG" 
            },
            "version": { 
              "type": "string", 
              "description": "Game version running on the server", 
              "example": "14.1.0-release-beta-bab40c71" 
            },
            "privateBeta": { 
              "type": "boolean", 
              "description": "Whether the server is running a private beta version", 
              "example": false 
            },
            "friendlyFire": { 
              "type": "boolean", 
              "description": "Whether friendly fire is enabled on the server", 
              "example": false 
            },
            "modded": { 
              "type": "boolean", 
              "description": "Whether the server is running mods", 
              "example": true 
            },
            "modFlags": { 
              "type": "integer", 
              "description": "Bit flags indicating which mods are running", 
              "example": 0 
            },
            "whitelist": { 
              "type": "boolean", 
              "description": "Whether the server requires whitelist to join", 
              "example": false 
            },
            "isoCode": { 
              "type": "string", 
              "description": "ISO 3166-1 alpha-2 country code of server location", 
              "example": "CA" 
            },
            "continentCode": { 
              "type": "string", 
              "description": "Two-letter continent code of server location", 
              "example": "NA" 
            },
            "latitude": { 
              "type": "number", 
              "format": "double", 
              "description": "Geographic latitude of server location", 
              "example": 45.499 
            },
            "longitude": { 
              "type": "number", 
              "format": "double", 
              "description": "Geographic longitude of server location", 
              "example": -73.585 
            },
            "official": { 
              "type": "string", 
              "description": "Official status label of the server", 
              "example": "REGIONAL OFFICIAL" 
            },
            "officialCode": { 
              "type": "integer", 
              "description": "Numeric code indicating official status level", 
              "example": 2 
            },
            "displaySection": { 
              "type": "integer", 
              "description": "Section where server should be displayed in the game UI", 
              "example": 1 
            },
            "_distanceFromClient": { 
              "type": "number", 
              "format": "double", 
              "description": "Calculated distance in kilometers from client IP (present only if sorted by distance & requested)", 
              "example": 150.7, 
              "nullable": true 
            },
            "_currentPlayers": {
              "type": "integer",
              "description": "Extracted current player count (present only if explicitly requested)",
              "example": 15,
              "nullable": true
            },
            "_maxPlayers": {
              "type": "integer",
              "description": "Extracted maximum player capacity (present only if explicitly requested)",
              "example": 25,
              "nullable": true
            }
          },
          "example": {
            "serverId": 87680,
            "accountId": 19126,
            "ip": "207.174.43.245",
            "port": 7783,
            "players": "15/25",
            "distance": 2180,
            "info": "PGNvbG9yPSNGRjhDMDA+V2VsY29tZSB0byB0aGUgU0NQIEZvdW5kYXRpb24hPC9jb2xvcj4=",
            "pastebin": "GmHsVgPG",
            "version": "14.1.0-release-beta-bab40c71",
            "privateBeta": false,
            "friendlyFire": false,
            "modded": false,
            "modFlags": 0,
            "whitelist": false,
            "isoCode": "CA",
            "continentCode": "NA",
            "latitude": 45.499,
            "longitude": -73.585,
            "official": "REGIONAL OFFICIAL",
            "officialCode": 2,
            "displaySection": 1
          }
        },
        "ServerMetrics": {
          "type": "object",
          "description": "Historical metrics for a server at a specific time interval",
          "properties": {
            "time": {
              "type": "string",
              "format": "date-time",
              "description": "Start time of the interval"
            },
            "players_current": {
              "type": "number",
              "format": "float",
              "description": "Average number of players during the interval"
            },
            "players_max": {
              "type": "integer",
              "description": "Maximum player capacity during the interval"
            }
          },
          "required": ["time", "players_current", "players_max"],
          "example": {
            "time": "2024-01-01T00:00:00Z",
            "players_current": 15.5,
            "players_max": 25
          }
        },
        "Error": {
          "type": "object",
          "description": "Standard error response structure",
          "properties": {
            "error": {
              "type": "string",
              "description": "A summary of the error."
            },
            "details": {
              "type": "string",
              "description": "Optional additional details about the error.",
              "nullable": true
            }
          },
          "required": ["error"],
          "example": {
            "error": "Failed to process request",
            "details": "Invalid parameter value for 'limit'"
          }
        }
      },
      "parameters": {
        "FilterParameter": {
          "name": "[any field name]",
          "in": "query",
          "description": "Any server field can be used as a filter parameter. For example: `isoCode=US` or `modded=true`",
          "schema": {
            "type": "string"
          },
          "examples": {
            "countryFilter": {
              "summary": "Filter by country",
              "value": "US"
            },
            "moddedFilter": {
              "summary": "Filter for modded servers",
              "value": "true"
            },
            "officialFilter": {
              "summary": "Filter for official servers",
              "value": "OFFICIAL"
            }
          }
        }
      },
      "examples": {
        "ServerExample": {
          "summary": "Example SCP:SL Server",
          "value": {
            "serverId": 87680,
            "accountId": 19126,
            "ip": "207.174.43.245",
            "port": 7783,
            "players": "15/25",
            "distance": 2180,
            "info": "PGNvbG9yPSNGRjhDMDA+V2VsY29tZSB0byB0aGUgU0NQIEZvdW5kYXRpb24hPC9jb2xvcj4=",
            "pastebin": "GmHsVgPG",
            "version": "14.1.0-release-beta-bab40c71",
            "privateBeta": false,
            "friendlyFire": false,
            "modded": false,
            "modFlags": 0,
            "whitelist": false,
            "isoCode": "CA",
            "continentCode": "NA",
            "latitude": 45.499,
            "longitude": -73.585,
            "official": "REGIONAL OFFICIAL",
            "officialCode": 2,
            "displaySection": 1
          }
        }
      }
    },
    "x-server-data-refresh": {
      "description": "Server data is automatically refreshed via a Cloudflare Worker scheduled task.",
      "frequency": "Every 1 minute"
    },
    "x-historical-data": {
      "description": "Historical data is collected every 30 seconds and stored in TimescaleDB for efficient time-series queries and aggregations.",
      "collection_frequency": "Every 30 seconds",
      "storage": "TimescaleDB",
      "retention": "1 year",
      "aggregation": "Automatic time-based aggregation for optimal query performance"
    }
  }
  
  